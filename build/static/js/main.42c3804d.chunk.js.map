{"version":3,"sources":["requests.js","axios.js","Row.js","Banner.js","Nav.js","App.js","index.js"],"names":["API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","id","videoId","opts","height","width","playerVars","autoplay","Banner","str","n","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42c3804d.chunk.js","sourcesContent":["const API_KEY = '1917055945c990678d62123faab8feb5';\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\r\n}\r\n\r\nexport default requests;\r\n","import axios from \"axios\";\r\n// base url to make requests to the movie database\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\nexport default instance;","import React, { useState, useEffect } from \"react\";\r\nimport instance from \"./axios\";\r\nimport YouTube from \"react-youtube\";\r\nimport movieTrailer from 'movie-trailer'\r\nimport './Row.css'; \r\n\r\nconst baseUrl = 'https://image.tmdb.org/t/p/original/';\r\n\r\n\r\nfunction Row ({ title, fetchUrl, isLargeRow }) {\r\n    const [movies, setMovies] = useState([]);\r\n    const [trailerUrl, setTrailerUrl] = useState('');\r\n\r\n    useEffect(()=>{\r\n        async function fetchData() {\r\n            const request = await instance.get(fetchUrl);\r\n            setMovies(request.data.results);\r\n            return request;\r\n        }\r\n        fetchData();\r\n    }, [fetchUrl]);\r\n\r\n\r\n    const opts ={\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n            autoplay: 1,\r\n        },\r\n    }\r\n\r\n    const handleClick =(movie)=>{\r\n        if (trailerUrl){\r\n            setTrailerUrl('');\r\n        } else {\r\n            movieTrailer(movie?.name || '')\r\n                .then((url)=>{\r\n                    const urlParams = new URLSearchParams(new URL(url).search)\r\n                    setTrailerUrl(urlParams.get(\"v\"));\r\n                })\r\n                .catch((error)=> console.log(error));\r\n        }\r\n    }\r\n    return ( \r\n        <div className=\"row\">\r\n            <h2> {title} </h2>\r\n\r\n            <div className=\"row-posters\">\r\n                {movies.map(movie => (\r\n                    <img \r\n                    key={movie.id}\r\n                    onClick={()=>{handleClick(movie)}}\r\n                    className={`row-poster ${isLargeRow && 'row-posterLarge'}`}\r\n                    src={`${baseUrl}${isLargeRow ? movie.poster_path : movie.backdrop_path}`} alt={movie.name} />\r\n                ))}\r\n            </div>\r\n            \r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Row;","import React, { useState, useEffect } from \"react\";\r\nimport instance from \"./axios\";\r\nimport requests from \"./requests\";\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovies] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await instance.get(requests.fetchNetflixOriginals);\r\n      setMovies(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n  // console.log(movies);\r\n\r\n  function truncate(str, n){\r\n    return str?.length > n ? str.substr(0, n-1) + '...' : str;\r\n  }\r\n\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{\r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n        backgroundPosition: \"center\"\r\n      }}\r\n    >\r\n      {/* Background image */}\r\n      <div className=\"banner-content\">\r\n        {/* title */}\r\n        <h1 className=\"banner-title\">\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n        <div className=\"banner-buttons\">\r\n          {/* div with 2 buttons */}\r\n          <buttons className=\"banner-button\">Play</buttons>\r\n          <buttons className=\"banner-button\">My List</buttons>\r\n        </div>\r\n        <h1 className=\"banner-description\">{truncate(movie?.overview, 200)}</h1>\r\n        {/* description */}\r\n      </div>\r\n\r\n      <div className=\"banner-fadeBottom\" />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Nav.css'\r\n\r\nfunction Nav() {\r\n    const [show, handleShow] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        window.addEventListener('scroll', ()=>{\r\n            if(window.scrollY > 100){\r\n                handleShow(true);\r\n            } else {\r\n                handleShow(false);\r\n            }\r\n        });\r\n        return ()=>{\r\n            window.removeEventListener('scroll');\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n      <div className={`nav ${show && 'nav-black'}`}>\r\n        <img\r\n          className=\"nav-logo\"\r\n          alt=\"Netflix thing\"\r\n          src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/170px-Netflix_2015_logo.svg.png\"\r\n        />\r\n\r\n        <img className=\"nav-avatar\"\r\n        src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/366be133850498.56ba69ac36858.png\"\r\n        alt=\"Netflix logo tin\"\r\n        />\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Nav\r\n","import React from \"react\";\nimport \"./App.css\";\nimport requests from \"./requests\";\nimport Row from \"./Row\";\nimport Banner from './Banner'\nimport Nav from \"./Nav\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* Navbar */}\n      <Nav />\n      {/* Banner */}\n      <Banner />\n\n      <Row \n        title=\"NETFLIX ORIGINALS\"\n        isLargeRow\n        fetchUrl={requests.fetchNetflixOriginals}\n      />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}